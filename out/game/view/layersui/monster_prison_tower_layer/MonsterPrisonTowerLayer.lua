local BaseLayer = requireLayerUI("BaseLayer") local MonsterPrisonTowerLayer = class("MonsterPrisonTowerLayer", BaseLayer) local MonsterPrisonTowerProxy = global.Facade:retrieveProxy(global.ProxyTable.MonsterPrisonTowerProxy)  --@RefType[ProxyTable] local pt = global.ProxyTable --@RefType[NoticeTable] local nt = global.NoticeTable local rp = function (pp) return global.Facade.retrieveProxy(global.Facade, pp) end  local send = function (ntName, body, type) global.Facade:sendNotification(ntName, body, type) end local public = global.MMO.PATH_RES_PUBLIC local private = global.MMO.PATH_RES_PRIVATE .. "monster_prison_tower/" local font = global.MMO.PATH_FONTS local visibleSize = cc.Director:getInstance():getVisibleSize()  function MonsterPrisonTowerLayer:ctor() MonsterPrisonTowerLayer.super.ctor(self) end  function MonsterPrisonTowerLayer.create(noticeData) local layer = MonsterPrisonTowerLayer.new() if layer:Init(noticeData) then return layer else return nil end end  function MonsterPrisonTowerLayer:Init(data) local bRet = false self._root = CreateExport("monster_prison_tower/monster_prison_tower_panel.lua") -- if self._root then -- self:addChild(self._root) -- self._panel = UIGetChildByName(self._root, "Panel_1") -- self._panel = ui_delegate(self._panel)  -- self:InitUI()  -- bRet = true -- end  return bRet end  function MonsterPrisonTowerLayer:InitUI() self:updateUI() -- self._panel.btn:addClickEventListener( -- function(pSender) -- end -- ) end     function MonsterPrisonTowerLayer:updateUI()  end  function MonsterPrisonTowerLayer:Refresh(data) self:updateUI() end  return MonsterPrisonTowerLayer
