local BaseUIMediator = requireMediator( "BaseUIMediator" ) local MonsterPrisonTowerLayerMediator = class("MonsterPrisonTowerLayerMediator", BaseUIMediator) MonsterPrisonTowerLayerMediator.NAME = "MonsterPrisonTowerLayerMediator"  function MonsterPrisonTowerLayerMediator:ctor() MonsterPrisonTowerLayerMediator.super.ctor( self ) end  function MonsterPrisonTowerLayerMediator:listNotificationInterests() local noticeTable = global.NoticeTable return { noticeTable.Layer_MonsterPrisonTower_Attach, noticeTable.Layer_MonsterPrisonTower_UnAttach, noticeTable.Layer_MonsterPrisonTower_Refresh, } end  function MonsterPrisonTowerLayerMediator:handleNotification(notification) local noticeName = notification:getName() local noticeTable = global.NoticeTable local noticeData = notification:getBody()  if noticeTable.Layer_MonsterPrisonTower_Attach == noticeName then self:AttachLayer(noticeData) elseif noticeTable.Layer_MonsterPrisonTower_UnAttach == noticeName then self:UnAttachLayer() elseif noticeTable.Layer_MonsterPrisonTower_Refresh == noticeName then self:RefreshLayer(noticeData) end end  function MonsterPrisonTowerLayerMediator:AttachLayer(data) if not self._layer then local layer = nil layer = requireLayerUI("monster_prison_tower_layer/MonsterPrisonTowerLayer").create(data) if layer and data and data.parent then data.parent:addChild(layer) self._layer = layer end end end function MonsterPrisonTowerLayerMediator:UnAttachLayer() if self._layer then self._layer:removeFromParent() self._layer = nil end end function MonsterPrisonTowerLayerMediator:RefreshLayer(data) if self._layer then self._layer:Refresh(data) end end   return MonsterPrisonTowerLayerMediator
